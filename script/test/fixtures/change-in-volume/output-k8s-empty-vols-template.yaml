---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.service.type: headless
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
spec:
  clusterIP: None
  ports:
    - name: headless
      port: 55555
      targetPort: 0
  selector:
    io.kompose.service: redis
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: web
  name: web
spec:
  ports:
    - name: "5000"
      port: 5000
      targetPort: 5000
  selector:
    io.kompose.service: web
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.service.type: headless
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.service.type: headless
      creationTimestamp: null
      labels:
        io.kompose.network/change-in-volume-default: "true"
        io.kompose.service: redis
    spec:
      containers:
        - image: redis
          name: redis
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: change-in-volume-default
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/change-in-volume-default: "true"
  podSelector:
    matchLabels:
      io.kompose.network/change-in-volume-default: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: web
  name: web
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: web
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/change-in-volume-default: "true"
        io.kompose.service: web
    spec:
      containers:
        - args:
            - python
            - app.py
          image: flask_web
          name: web
          ports:
            - containerPort: 5000
          resources: {}
          volumeMounts:
            - mountPath: /code
              name: code-volume
      restartPolicy: Always
      volumes:
        - emptyDir: {}
          name: code-volume
status: {}

